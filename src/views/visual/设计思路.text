大屏可视化

业务逻辑：
      1、看板： 一幅幅可以自定义的画面，由一个个组件组成。 看板分为 树状看板(树结构数据可传递到组件) 单张看板
      2、组件： 一个个小的功能模块，用来组成看板
      3、数据源： 为组件提供需要的数据，可以是内部二次处理的数据，也可以是第三方数据
      4、控制器： 除了组件内部的操作，可视化还应该有整体或者局部的数据控制，我称之为控制器。他可以操控组件数据的变化。
            控制器是完全独立的，每个组件，数据获取的时候都检查是否有控制器，有，用控制器的参数，没有，用默认参数
      
      总结： 为实现用户可自定义订制的大屏，将可视化功能分解为看板、组件、数据源这3部分，便于定制化，也便于权限分割，提供不同的价值服务
            这是可视化的设计思路，实际上涉及的功能点非常多，是一个很复杂，也很大的功能，内部需要细化的功能点很多

需求拆解：
      1、用户分级。目前区分为2类。 第一类 技术人员，可以使用开发者模式，提供转换函数的编辑界面，数据源、组件都可以直接写 简单代码 实现业务
            第二类 基础用户，不会也不需要写代码，完全通过界面操作实现业务
      2、2类用户界限分明，系统开发也是绝对界限分明的。 后期需要打通转换函数和界面操作的数据互通
      3、针对这两种业务情景，总结一下
            开发 数据源 组件等模块的数据处理界面，专门用来动态增加转换函数模板的地方
            这样系统不需要发版，懂点代码的一线运维人员就可以做到模板编写、更新，并推送给需要用户的手中
      


注意：
      1、组件只接受 配置 和 数据。
      2、不会修改数据源的原始数据，数据处理模板的作用是改变原始数据和组件配置之间的 绑定关系
      3、上述功能，就要求数据源必须做到结构稳定，否则将会报错
      4、整个功能模块，尽可能原生，避免和UI框架绑定太深，避免不同项目换UI框架，太麻烦。
      5、看板的  查看、编辑做成2个界面
      6、看板有默认模板
      7、组件具体配置，分简单和更多，比如表格一列，就标题+绑定的字段+数据类型就行，点击样式配置，弹窗，编辑更加详细的配置
            比如，图表的轴线等等也是

目录结构 
   dashboard 看板
      list 看板列表
      template 看板模板
      detail 看板详情
      editDetail 可编辑看板详情
      添加组件的弹窗
      创建看板的弹窗
      编辑组件的右侧面板 有组件详情、数据源、控制器

      主题、缩放、定时刷新数据的时间
      组件有标题和边框选择，有个列表，每个主题都默认一种风格的边框
   component 组件
      componentDetail 各种组件的具体内容
      componentSetting 各种组件的配置界面
      dataSetting 数据源配置界面(还不成熟)
